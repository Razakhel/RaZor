name: RaZor - Windows

on: [push, pull_request]

jobs:
  windows:
    name: Windows (${{ matrix.compiler.c }}, ${{ matrix.build_type }})
    runs-on: windows-2022
    env:
      OPENAL_VERSION: 1.23.1

    strategy:
      fail-fast: false
      matrix:
        compiler:
          - { c: cl, cpp: cl }
        build_type:
          - Debug
          - Release

    steps:
    - uses: actions/checkout@v3

    - name: Pulling RaZ
      run: git submodule update --init --recursive

    - name: Installing Qt
      uses: jurplel/install-qt-action@v3
      with:
        host: windows
        target: desktop
        arch: win64_msvc2019_64
        setup-python: false
        install-deps: true
        dir: ${{ runner.workspace }}

      # Caching OpenAL-Soft's installation; this avoids reinstalling it on every build
    - name: OpenAL-Soft caching
      uses: actions/cache@v3
      id: openal-soft
      with:
        path: C:/OpenAL
        key: openal-soft-${{ env.OPENAL_VERSION }}
        restore-keys: |
          openal-soft-${{ env.OPENAL_VERSION }}

      # Downloading & installing OpenAL-Soft to handle the audio part; only done when failed to find its cached installation
    - name: OpenAL-Soft setup
      if: steps.openal-soft.outputs.cache-hit != 'true'
      run: |
        curl -sSkLO https://github.com/kcat/openal-soft/releases/download/${{ env.OPENAL_VERSION }}/openal-soft-${{ env.OPENAL_VERSION }}-bin.zip &&
        7z x openal-soft-${{ env.OPENAL_VERSION }}-bin.zip &&
        mv openal-soft-${{ env.OPENAL_VERSION }}-bin C:/OpenAL

    - name: Build setup
      run: cmake -E make_directory ${{ runner.workspace }}/build-${{ matrix.compiler.c }}

    - name: Configuration
      shell: bash
      working-directory: ${{ runner.workspace }}/build-${{ matrix.compiler.c }}
      run: |
        cmake -G"Visual Studio 17 2022" -A x64 \
              -DCMAKE_BUILD_TYPE=${{ matrix.build_type }} \
              -DRAZOR_BUILD_RAZ=ON \
              -DRAZ_USE_AUDIO=ON \
              -DENABLE_DEBUG_INFO=ON \
              $GITHUB_WORKSPACE &&
        cmake --build . --target RaZor_PrintDebugInfo --config ${{ matrix.build_type }}

    - name: Build
      shell: bash
      working-directory: ${{ runner.workspace }}/build-${{ matrix.compiler.c }}
      run: |
        cmake --build . --config ${{ matrix.build_type }} &&
        pwd && find .

    # The include/ & lib/ folders are removed after installation; these are RaZ's install results
    # A workaround must be found to tell CMake not to install them from RaZor
    - name: Install
      working-directory: ${{ runner.workspace }}/build-${{ matrix.compiler.c }}
      run: |
        cmake --install . --prefix C:/RaZor --config ${{ matrix.build_type }} &&
        rm C:/RaZor/include -r &&
        rm C:/RaZor/lib -r

    - name: Upload build
      uses: actions/upload-artifact@v3
      with:
        name: RaZor-windows-${{ matrix.compiler.c }}-${{ matrix.build_type }}-${{ github.run_id }}
        path: |
          C:/RaZor
